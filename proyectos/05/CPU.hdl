// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    //Decode instruction ------------------------
    DMux(in = true, sel = instruction[15], a = insA, b = insC);
    //if insC and write aluOut to Areg then let the outM pass
    And(a = instruction[5], b = insC, out = AtoA);
    
    // A | C instruction ------------------------   
    Mux16(a = instruction, b = outMaux, sel = AtoA, out = regAaux);

    //A register and addressM -------------------
    //if insA || insC and ALUout to A then load AR
    Or(a = insA, b = AtoA, out = loadAR);
    ARegister(in = regAaux, load = loadAR, out = regA, out[0..14] = addressM);

    // A | M value to ALU -----------------------
    //if insA = true load Areg into ALU by default else "depends on the C instruction[12] a"
    Mux(a = instruction[12], b = false, sel = insA, out = loadSecondVALU);
    Mux16(a = regA, b = inM, sel = loadSecondVALU, out = secondVALU);

    //D register
    //if insA = true dont load ALUout by default in D else "depends on the C instruction[4] d2"
    And(a = instruction[4], b = insC, out = loadDR);
    DRegister(in = outMaux, load = loadDR, out = firstVALU);

    //ALU ---------------------------------------
    ALU(x = firstVALU, y = secondVALU, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outMaux, out = outM, zr = outZR, ng = outNG);

    //Write to M -------------------------------
    //if insC = true and instruction[3] = true then writeM
    And(a = instruction[3], b = insC, out = writeM);

    //PC ----------------------------------------
    Not(in = outZR, out = notOutZR);
    Not(in = outNG, out = notOutNG);
    And(a = notOutZR, b = notOutNG, out = jgtaux); //jgt
    And(a = jgtaux, b = instruction[0], out = jgt);
    And(a = instruction[2], b = outNG, out = jlt); //jlt 
    And(a = outZR, b = instruction[1], out = jeq); //jeq 
    Or(a = jeq, b = jgt, out = jge); //jge
    Or(a = jlt, b = jgt, out = jne); //jne 
    Or(a = jlt, b = jeq, out = jle); //jle

    //if all j's bits are up then jmp unconditionally
    And(a = instruction[0], b = instruction[1], out = jmpaux);
    And(a = jmpaux, b = instruction[2], out = jmp); //jmp

    //check if there is a jump
    Or(a = jgt, b = jlt, out = jump0);
    Or(a = jump0, b = jeq, out = jump1);
    Or(a = jump1, b = jge, out = jump2);
    Or(a = jump2, b = jne, out = jump3);
    Or(a = jump3, b = jle, out = jump4);
    Or(a = jump4, b = jmp, out = lpc);

    //if insC = true and there is a jump load AR into PC
    And(a = insC, b = lpc, out = jumpToA);
    //if there is a jump then dont increment
    Not(in = jumpToA, out = incr);
    PC(in = regA, load = jumpToA, inc = incr, reset = reset, out[0..14] = pc, out[15] = hackReservedROM);
}